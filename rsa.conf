# plugins used in this pipeline:
#   + logstash-input-syslog
#   + logstash-filter-dissect
#   + logstash-filter-mutate
#   + logstash-filter-date
#   + logstash-filter-ruby
#   + logstash-output-elasticsearch
#   + logstash-output-file
#
# index template settings:
#   + Data stream: "true"
#   + Priority: "200"
#   + Component templates: "as needed ..."
#   + Index settings: "specify ILM Policy"
#
# iptables commands to redirect traffic from port 514 to port 5514:
#   <iptables -A PREROUTING -t nat -i ens3 -p udp --dport 514 -j REDIRECT --to-port 5514>
#   <iptables-save > /etc/iptables/rules.v4>
#   <apt install iptables-persistent>
#
# ToDo's:
#   + no logs from cloud regarding device regsitration (BI-22001151)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
# >> Syslog RFC 3164 Input <<
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
input {
  syslog {
    port => 5514
  }
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~
# >> Parse RSA Log Format <<
# ~~~~~~~~~~~~~~~~~~~~~~~~~~
filter {
  # Parse Admin Logs
  if "audit.admin.com" in [message] {
    dissect {
      mapping => {
        "message" => "%{IMS_server_local_time}, %{hostname}, %{Category}, %{Log_level}, %{Event_ID},%{IMS_server_instance},%{Client_IP},%{Server_IP},%{Action},%{Action_ID},%{Result},%{Reason},%{Session_ID},%{Batch_ID},%{User_ID},%{User_identity_source_ID},%{User_securtiy_domain_ID},%{User_login_name},%{User_first_name},%{User_last_name},%{Domain_object_1_type},%{Domain_object_1_ID},%{Domain_object_1_identity_source_ID},%{Domain_object_1_security_domain_ID},%{Domain_object_1_name},%{Domain_object_2_type},%{Domain_object_2_ID},%{Domain_object_2_identity_source_ID},%{Domain_object_2_security_domain_ID},%{Domain_object_2_name},%{Modifications}"
      }
    }

    # Add event.dataset
    mutate {
      add_field => { "[event][dataset]" => "rsa.admin"  }
    }
  }

  # Parse Runtime Logs
  else if "audit.runtime.com" in [message] {
    dissect {
      mapping => {
        "message" => "%{IMS_server_local_time}, %{hostname}, %{Category}, %{Log_level}, %{Event_ID},%{IMS_server_instance},%{Client_IP},%{Server_IP},%{Action},%{Action_ID},%{Result},%{Reason},%{Session_ID},%{User_ID},%{User_identity_source_ID},%{User_securtiy_domain_ID},%{User_login_name},%{User_first_name},%{User_last_name},%{Agent_ID},%{Agent_security_domain_ID},%{Agent_address},%{Agent_name},%{Agent_type},%{Policy_method_ID},%{Policy_method_name},%{Policy_ID},%{Policy_expression},%{Argument_1},%{Argument_2},%{Argument_3},%{Argument_4},%{Argument_5},%{Argument_6},%{Argument_7},%{Argument_8},%{Argument_9},%{Argument_10},"
      }
    }

    # Add event.dataset
    mutate {
      add_field => { "[event][dataset]" => "rsa.runtime"  }
    }
  }

  # Parse System Logs
  else if "system.com.rsa" in [message] {
    dissect {
      mapping => {
        "message" => "%{IMS_server_local_time}, %{hostname}, %{Category}, %{Log_level}, %{Event_ID},%{IMS_server_instance},%{Client_IP},%{Server_IP},%{Action},%{Action_ID},%{Result},%{Reason},%{Session_ID},%{User_ID},%{User_identity_source_ID},%{User_securtiy_domain_ID},%{User_login_name},%{User_first_name},%{User_last_name},%{Argument_1},%{Argument_2},%{Argument_3},%{Argument_4},%{Argument_5},%{Argument_6},"
      }
    }

    mutate {
      # Add event.dataset
      add_field => { "[event][dataset]" => "rsa.system"  }
    }
  }

  # Error handling
  else {
    mutate {
      add_tag => [ "_parsingfailure" ]
    }
  }

  if ![tags] {
    # Parse correct Timestamp
    date {
      match => [ "IMS_server_local_time", "ISO8601" ]
    }

    # Remove empty Fields
    ruby {
      code => "
        hash = event.to_hash
        hash.each do |k,v|
          if v == '' || v == nil
            event.remove(k)
          end
        end
      "
    }
  }
}

# ~~~~~~~~~~~~~~~~~~~~
# >> Elastic Output <<
# ~~~~~~~~~~~~~~~~~~~~
output {
  if ![tags] {
    # on success => write to elastic
    elasticsearch {
      hosts => ["https://127.0.0.1:9200"]
      index => "logs-%{[event][dataset]}-prod"
      action => "create"
    }
  }
  else {
    # on failure => write to logfile
    file {
      path => "/var/log/logstash/pipeline.log"
    }
  }
}
