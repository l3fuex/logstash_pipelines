# plugins used in this pipeline:
#   + logstash-input-tcp
#   + logstash-filter-grok
#   + logstash-filter-kv
#   + logstash-filter-date
#   + logstash-filter-geoip
#   + logstash-filter-mutate
#   + logstash-output-elasticsearch
#   + logstash-output-file
#
# index template settings:
#   + Data stream: "true"
#   + Priority: "200"
#   + Component templates: "as needed ..."
#   + Index settings: "specify ILM Policy"
#
# cp_log_exporter configuration:
#   + https://supportcenter.checkpoint.com/supportcenter/portal?eventSubmit_doGoviewsolutiondetails=&solutionid=sk122323#Change%20Log
#   + https://sc1.checkpoint.com/documents/R81/WebAdminGuides/EN/CP_R81_LoggingAndMonitoring_AdminGuide/Topics-LMG/Logs-in-Milliseconds.htm
#
# ToDo's:
#   + use cef instead of syslog
#   + error handling - normal error handling based on tags is not possible as the tags field is a default field in the checkpoint log format

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
# >> Syslog RFC 5424 Input <<
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
input {
  tcp {
    port => 9001
  }
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# >> Parse Checkpoint Log Format <<
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
filter {
  # Parse Syslog RFC 5424 Format
  grok {
    match => {
      "message" => "<%{POSINT:pri}>%{NUMBER:version} %{TIMESTAMP_ISO8601:timestamp} %{SYSLOGHOST:logsource} %{DATA:application} %{DATA:pid} %{DATA:message_id} \[%{GREEDYDATA:sdata}\]%{GREEDYDATA:msg}"
    }
  }

  # Extract Key Value Pairs from structured Data
  kv {
    source => "sdata"
    field_split => ";"
    value_split => ":"
    trim_key => " "
  }

#  # Extract Key Value Pairs from __policy_id_tag Field
#  kv {
#    source => "__policy_id_tag"
#    field_split_pattern => "(;|\[){1}"
#    value_split => "="
#    remove_char_value => "[{}\\\]]"
#  }

  # Parse correct Timestamp
  date {
    match => [ "time", "UNIX_MS" ]
  }

  # Add geo information for destination IP
  if [dst] {
    geoip {
      source => "dst"
      target => "dst_geo"
      tag_on_failure => [ ]
    }
  }

  # Add geo information for source IP
  if [src] {
    geoip {
      source => "src"
      target => "src_geo"
      tag_on_failure => [ ]
    }
  }

  mutate {
    # Add event.dataset
    add_field => { "[event][dataset]" => "checkpoint.security" }

    # Remove unnecessary Fields
    remove_field => [ "sdata", "msg", "__policy_id_tag", "version" ]
  }
}

# ~~~~~~~~~~~~~~~~~~~~
# >> Elastic Output <<
# ~~~~~~~~~~~~~~~~~~~~
output {
  elasticsearch {
    hosts => ["https://127.0.0.1:9200"]
    index => "logs-%{[event][dataset]}-prod"
    action => "create"
    user => "elastic"
    password => "Cisco123"
    ssl => true
    cacert => "/etc/ssl/certs/elasticsearch-ca.pem"
  }
}
