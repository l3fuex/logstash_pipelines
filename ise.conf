# plugins used in this pipeline:
#   + logstash-input-syslog
#   + logstash-filter-grok
#   + logstash-filter-aggregate
#   + logstash-filter-kv
#   + logstash-filter-date
#   + logstash-filter-mutate
#   + logstash-output-elasticsearch
#   + logstash-output-file
#
# index template settings:
#   + Data stream: "true"
#   + Priority: "200"
#   + Component templates: "as needed ..."
#   + Index settings: "specify ILM Policy"
#
# description of remote & local syslog message format
#   + https://www.cisco.com/c/en/us/td/docs/security/ise/syslog/Cisco_ISE_Syslogs/m_IntrotoSyslogs.pdf
#
# this pipeline was tested with the following Logging Categories:
#   + Passed Authentications
#   + Failed Attempts

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
# >> Syslog RFC 3164 Input <<
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
input {
  syslog {
    port => 9003
  }
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# >> Parse Cisco ISE Log Format <<
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
filter {
  # Parse Remote Syslog Message Format
  grok {
    match => {
      "message" => "%{NOTSPACE:cat_name} %{NUMBER:msg_id} %{NUMBER:total_seg:int} %{INT:seg_num:int} %{GREEDYDATA:data}"
    }
  }

  # Concatenate Syslog Lines
  aggregate {
    task_id => "%{msg_id}"
    code => '
      map["cat_name"] = event.get("cat_name")
      map["msg_id"] ||= event.get("msg_id")
      map["message"] ||= ""
      map["message"] += event.get("data")
      event.cancel()
    '
    push_previous_map_as_event => true
    timeout => 3
  }

  # Parse Local Store Syslog Message Format
  grok {
    match => {
      "message" => "%{TIMESTAMP_ISO8601:time} %{ISO8601_TIMEZONE} %{NUMBER:sequence_number} %{NUMBER:msg_code} %{LOGLEVEL:msg_sev} %{DATA:msg_class}: %{DATA:msg_text}, %{GREEDYDATA}"
    }
  }

  # Extract Key Value Pairs
  kv {
    exclude_keys => ["Step", "StepData"]
    field_split => ","
    trim_key => " "
    remove_char_value => "[{}\\]"
  }

  # Parse correct Timestamp
  date {
    match => [ "time", "ISO8601" ]
  }

  mutate {
    # Add event.dataset
    add_field => { "[event][dataset]" => "ise.aaa"  }
  }
}

# ~~~~~~~~~~~~~~~~~~~~
# >> Elastic Output <<
# ~~~~~~~~~~~~~~~~~~~~
output {
  if ![tags] {
  # on success => write to elastic
    elasticsearch {
      hosts => ["https://127.0.0.1:9200"]
      index => "logs-%{[event][dataset]}-prod"
      action => "create"
      user => "elastic"
      password => "Cisco123"
      ssl => true
      cacert => "/etc/ssl/certs/elasticsearch-ca.pem"
    }
  }
  else {
    # on failure => write to logfile
    file {
      path => "/var/log/logstash/pipeline_ise_error.log"
    }
  }
}
